//Ben Betchley

//10.Given a sequence of n integer numbers, extract the sub-sequence of maximum length which is in
//ascending order

//This code to extract the longest subsequence takes multiple steps, first to find the longest subsequece,
//then to print those elements backwards, and finally to use push_back of the sequence to add a new element 
//to the end of the vector

#include <iostream>
#include <vector>

using namespace std;
//create a function to be able to find the longest subsequence of an array. Taking variables
//seq pointing to the array itself, and the size of the array.
void arr(int *seq, int size)
{
//create a vector to print the sequence, with the idea that the vector can be resized to print the
//subsequence.
	vector<int> printSequence;
	{
//create two counter, temp and count both starting with 1.
		int temp = 1;
		int count = 1;
//for loop searches through the vector to find the longest subsequence. If the element is smaller than 
//the next element add to counter, else if the counter is bigger or equal to temp, make temp the value of
//count, and reset count to 1.
		for (int s = 0; s < size; s++)
		{
			if (seq[s] < seq[s + 1])
			{
				count++;

			}
			else if (count >= temp)
			{
				temp = count;
				count = 1;
			}
		}
//now the elements need to be printed, not just the largest subsequence(4) memory has the value of 1 and 
//records the numbers in the longest subsequence. printer takes the value of temp.
		int memory = 1;
		int printer = temp;
//same for loop when calculating count, instead adding 1 to memory each time.
		for (int i = 0; i < memory; i++) {
			if (seq[i] < seq[i + 1]) {
				memory++;
			}
//if the memory has the same value as printer(4), loops backwards to print the elements. so while printer is
//not 0, keep printing the seq element. (4, 3, 2, 1)
			else if (memory == printer) {
				for (int p = printer; printer != 0; printer--) {
//.push_back takes the elements, go through and take everything from the beginning and swap with the end.
//so 1 - 4 and 2 - 3.
					printSequence.push_back(seq[i]);
					i--;
				}
			}
		}
//creates an iterator of the first element and the end element of the vector.
		reverse(printSequence.begin(), printSequence.end());
		for (int l = 0; l < printSequence.size(); l++) {
			cout << printSequence[l] << ",";
		}
	}
}
//main function holds the starting sequence and size.
int main()
{
	int size = 8;
	int seq[] = { 1,2,3,4,1,5,1,6,7 };

	arr(seq, size);

	system("pause");
	return 0;
}
