//Ben Betchley

//11. Based on the Python code or the C++ code provided in class as a starting point, implement
//the double linked list node delete function.

//implemented the delete node function using a while loop as it can repeat through the code for an 
//unknown number of times. the function removeNode will loop through until the node specified is met,
//and at that point is removed.

#include <iostream>
using namespace std;
//node and list class to hold variables, both used in main function.
class Node
{
public:
	int value;
	Node* next;
	Node* prev;
	Node(int val) {
		this->value = val;
		this->next = (Node*)0;
		this->prev = (Node*)0;
	}
	~Node() {

	}
};
class List
{

public:
	Node* head;
	Node* tail;

	List() {

		this->head = 0;
		this->tail = 0;
	}
	~List() {

	}
	void insert(Node* n, Node* x) {
		if (n != 0) {
			x->next = n->next;
			n->next = x;
			x->prev = n;
			if (x->next != 0)
				x->next->prev = x;
		}
		if (this->head == 0) {
			this->head = x;
			this->tail = x;
			x->prev = 0;
			x->next = 0;
		}
		else if (this->tail = n) {
			this->tail = x;
		}
	}
	void display() {
		Node* i = this->head;
		cout << "List: ";
		while (i != 0) {
			cout << i->value << ",";
			i = i->next;
		}
		cout << endl;
	}

//function removeNode is implemented, taking the value and the node position.
	void removeNode(int value, Node* i) 
	{
//
		while (i -> value != value)
		{
			i = i->next;
		}
//if previous node is not null, point to the previous, next node which equals the next node position.
		if (i->prev != NULL)
		{
			i->prev->next = i->next;
		}
//else this point to the head (first node in the linked list) equals node points to next node position.
		else
		{
			this->head = i->next;
		}
//if next node is not null, point to the next, previous node which equals the previous node position.
		if (i->next != NULL)
		{
			i->next->prev = i->prev;
		}
//else this points to the tail (last node in the linked list) equals node points to the previous node position.
		else
		{
			this->tail = i->prev;
		}
	}
};

int main(int argc, char *argv[])
{
	List* l = new List();
	l->insert(0, new Node(4));
	l->insert(l->head, new Node(6));
	l->insert(l->head, new Node(8));

	l->removeNode(6, l->head);

	l->display();
	delete l;

	system("pause");
	return 0;
}
